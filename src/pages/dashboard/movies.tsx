import { useMutation, useQuery } from "@apollo/client";
import {
  Badge,
  Breadcrumb,
  Button,
  Card,
  Dropdown,
  Label,
  Modal,
  Sidebar,
  Spinner,
  Table,
  TextInput,
} from "flowbite-react";
import { type NextPage } from "next";
import Head from "next/head";
import { Disc, House, UsersThree, VideoCamera } from "phosphor-react";
import React, { useState } from "react";
import ProtectedPage from "../../components/layout/ProtectedPage";
import Logo from "../../components/Logo";
import {
  CREATE_MOVIE,
  DELETE_MOVIE,
  UPDATE_MOVIE,
} from "../../graphql/mutations";
import { GET_MOVIES } from "../../graphql/queries";
import {
  type Movie,
  type Person,
  type ProductionCompany,
} from "../../graphql/types";

const Movies: NextPage = () => {
  const { data, loading } = useQuery(GET_MOVIES);
  const [showUpdateModal, setShowUpdateModal] = useState<boolean>(false);
  const [showCreateModal, setShowCreateModal] = useState<boolean>(false);

  const [movieToUpdate, setMovieToUpdate] = useState<Movie | undefined>();
  const [updateMovie] = useMutation(UPDATE_MOVIE);
  const [createMovie] = useMutation(CREATE_MOVIE);
  const [deleteMovie] = useMutation(DELETE_MOVIE);

  const prepUpdate = (movie: Movie) => {
    setShowUpdateModal(true);
    setMovieToUpdate(movie);
  };

  const update = (event: React.FormEvent) => {
    event.preventDefault();
    event.stopPropagation();
    const form = event.target as typeof event.target & {
      title: { value: string };
      tagline: { value: string };
      released: { value: string };
    };
    const movieInfo = {
      id: movieToUpdate?.id,
      title: form.title.value,
      tagline: form.tagline.value,
      released: parseInt(form.released.value),
    };

    updateMovie({
      variables: {
        ...movieInfo,
      },
      onCompleted: (data) => {
        if (data.updateMovie) {
          window.location.reload();
          alert("Updated movie successfully!");
        } else {
          alert("Something went wrong updating the movie record");
          console.log(data);
        }
      },
      onError: (error) => {
        // alert("Something went wrong updating the movie record");
        console.log(error);
      },
    });
  };

  const create = (event: React.FormEvent) => {
    event.preventDefault();
    event.stopPropagation();
    const form = event.target as typeof event.target & {
      title: { value: string };
      tagline: { value: string };
      released: { value: string };
    };
    const movieInfo = {
      title: form.title.value,
      tagline: form.tagline.value,
      released: parseInt(form.released.value),
    };

    createMovie({
      variables: {
        ...movieInfo,
      },
      onCompleted: (data) => {
        if (data.createMovie) {
          window.location.reload();
          alert("Created movie successfully!");
        } else {
          alert("Something went wrong creating the movie record");
          console.log(data);
        }
      },
      onError: (error) => {
        // alert("Something went wrong creating the movie record");
        console.log(error);
      },
    });
  };

  const deleteMovieRecord = (id: string) => {
    deleteMovie({
      variables: {
        id: id,
      },
      onCompleted: (data) => {
        if (data.removeMovie) {
          window.location.reload();
          alert("Deleted movie successfully!");
        } else {
          alert("Something went wrong deleting the movie");
          console.log(data);
        }
      },
      onError: (error) => {
        // alert("Something went wrong deleting the movie");
        console.log(error);
      },
    });
  };

  return (
    <>
      <Head>
        <title>IMDD</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProtectedPage>
        <main className="dark flex min-h-screen min-w-full flex-row bg-gradient-to-r from-[#0d0d0e] to-[#0a0b0d]">
          <div className="flex max-h-screen w-1/6 flex-col px-6 py-8">
            <div className="mb-20">
              <Logo />
            </div>
            <Sidebar className="w-full !bg-gradient-to-r !from-[#0d0d0e] !to-[#0a0b0d]">
              <Sidebar.Items>
                <Sidebar.ItemGroup>
                  <Sidebar.Item
                    href="/dashboard"
                    className="!text-[#afadbd]"
                    icon={House}
                  >
                    Dashboard
                  </Sidebar.Item>
                  <Sidebar.Item
                    href="/dashboard/movies"
                    className="!text-[#afadbd]"
                    icon={Disc}
                  >
                    Movies
                  </Sidebar.Item>
                  <Sidebar.Item
                    href="/dashboard/people"
                    className="!text-[#afadbd]"
                    icon={UsersThree}
                  >
                    People
                  </Sidebar.Item>
                  <Sidebar.Item
                    href="/dashboard/companies"
                    className="!text-[#afadbd]"
                    icon={VideoCamera}
                  >
                    Companies
                  </Sidebar.Item>
                </Sidebar.ItemGroup>
              </Sidebar.Items>
            </Sidebar>
          </div>
          <div className="flex w-5/6 flex-col">
            <div className="flex min-h-[150px] w-full flex-col items-start justify-between bg-gradient-to-r from-[#3126b0] to-[#6d2fc4] py-8 px-10">
              <Breadcrumb aria-label="Breadcrumbs">
                <Breadcrumb.Item href="/dashboard">Dashboard</Breadcrumb.Item>
                <Breadcrumb.Item href="/dashboard/movies">
                  Movies
                </Breadcrumb.Item>
              </Breadcrumb>
              <h1 className="text-4xl font-bold tracking-tight text-white">
                IMDD Movie List
              </h1>
            </div>
            <div className="flex h-[75vh] w-full flex-col items-start p-10">
              <Card>
                <div className="flex w-full flex-row justify-end">
                  <Button
                    type="button"
                    onClick={() => setShowCreateModal(true)}
                  >
                    Create Movie
                  </Button>
                </div>
                {loading ? (
                  <Spinner size="xl"></Spinner>
                ) : (
                  <Table>
                    <Table.Head>
                      <Table.HeadCell>ID</Table.HeadCell>
                      <Table.HeadCell>Title</Table.HeadCell>
                      <Table.HeadCell>Released</Table.HeadCell>
                      <Table.HeadCell>Tagline</Table.HeadCell>
                      <Table.HeadCell>Cast</Table.HeadCell>
                      <Table.HeadCell>Directors</Table.HeadCell>
                      <Table.HeadCell>Production Company</Table.HeadCell>
                      <Table.HeadCell>Actions</Table.HeadCell>
                    </Table.Head>
                    <Table.Body>
                      {data.movies.map((movie: Movie, index: number) => (
                        <Table.Row key={index}>
                          <Table.Cell>{movie.id}</Table.Cell>
                          <Table.Cell>{movie.title}</Table.Cell>
                          <Table.Cell>{movie.released}</Table.Cell>
                          <Table.Cell>{movie.tagline}</Table.Cell>
                          <Table.Cell>
                            {movie.cast ? (
                              <div className="flex max-h-12 max-w-lg flex-wrap gap-2 overflow-scroll">
                                {movie.cast?.map(
                                  (castMember: Person, index: number) => (
                                    <Badge color="gray" key={index}>
                                      {castMember.firstName}{" "}
                                      {castMember.lastName}
                                    </Badge>
                                  )
                                )}
                              </div>
                            ) : (
                              <>N/A</>
                            )}
                          </Table.Cell>
                          <Table.Cell>
                            {movie.directors ? (
                              <div className="flex max-h-12 max-w-lg flex-wrap gap-2 overflow-scroll">
                                {movie.directors?.map(
                                  (director: Person, index: number) => (
                                    <Badge color="gray" key={index}>
                                      {director.firstName} {director.lastName}
                                    </Badge>
                                  )
                                )}
                              </div>
                            ) : (
                              <>N/A</>
                            )}
                          </Table.Cell>
                          <Table.Cell>
                            {movie.producedBy ? (
                              <div className="flex max-h-12 max-w-lg flex-wrap gap-2 overflow-scroll">
                                {movie.producedBy?.map(
                                  (
                                    studio: ProductionCompany,
                                    index: number
                                  ) => (
                                    <Badge color="gray" key={index}>
                                      {studio.name}
                                    </Badge>
                                  )
                                )}
                              </div>
                            ) : (
                              <>N/A</>
                            )}
                          </Table.Cell>
                          <Table.Cell>
                            <Dropdown
                              label="Actions"
                              inline={true}
                              placement="left"
                            >
                              <Dropdown.Item onClick={() => prepUpdate(movie)}>
                                Edit
                              </Dropdown.Item>
                              <Dropdown.Item
                                onClick={() => deleteMovieRecord(movie.id)}
                              >
                                Delete
                              </Dropdown.Item>
                            </Dropdown>
                          </Table.Cell>
                        </Table.Row>
                      ))}
                    </Table.Body>
                  </Table>
                )}
              </Card>
              <Modal
                show={showUpdateModal}
                onClose={() => {
                  setShowUpdateModal(false);
                  setMovieToUpdate(undefined);
                }}
              >
                <Modal.Header>Update Movie</Modal.Header>
                <Modal.Body>
                  <form className="flex flex-col gap-4" onSubmit={update}>
                    <div>
                      <div className="mb-2 block">
                        <Label htmlFor="title" value="New Title" />
                      </div>
                      <TextInput
                        id="title"
                        type="text"
                        name="title"
                        placeholder={movieToUpdate?.title ?? ""}
                        defaultValue={movieToUpdate?.title ?? ""}
                      />
                    </div>
                    <div>
                      <div className="mb-2 block">
                        <Label htmlFor="title" value="New Tagline" />
                      </div>
                      <TextInput
                        id="tagline"
                        type="text"
                        name="tagline"
                        placeholder={movieToUpdate?.tagline ?? ""}
                        defaultValue={movieToUpdate?.tagline ?? ""}
                      />
                    </div>
                    <div>
                      <div className="mb-2 block">
                        <Label htmlFor="released" value="New Release Year" />
                      </div>
                      <TextInput
                        id="released"
                        type="number"
                        name="released"
                        placeholder={movieToUpdate?.released.toString() ?? ""}
                        defaultValue={movieToUpdate?.released.toString() ?? ""}
                      />
                    </div>
                    <Button type="submit">Submit</Button>
                  </form>
                </Modal.Body>
              </Modal>
              <Modal
                show={showCreateModal}
                onClose={() => {
                  setShowCreateModal(false);
                }}
              >
                <Modal.Header>Create Movie</Modal.Header>
                <Modal.Body>
                  <form className="flex flex-col gap-4" onSubmit={create}>
                    <div>
                      <div className="mb-2 block">
                        <Label htmlFor="title" value="Title" />
                      </div>
                      <TextInput id="title" type="text" name="title" />
                    </div>
                    <div>
                      <div className="mb-2 block">
                        <Label htmlFor="title" value="Tagline" />
                      </div>
                      <TextInput id="tagline" type="text" name="tagline" />
                    </div>
                    <div>
                      <div className="mb-2 block">
                        <Label htmlFor="released" value="Release Year" />
                      </div>
                      <TextInput id="released" type="number" name="released" />
                    </div>
                    <Button type="submit">Submit</Button>
                  </form>
                </Modal.Body>
              </Modal>
            </div>
          </div>
        </main>
      </ProtectedPage>
    </>
  );
};

export default Movies;
